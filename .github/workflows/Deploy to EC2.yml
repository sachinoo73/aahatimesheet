name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install dependencies
        run: |
          npm install
          cd server && npm install
          cd ..

      # - name: Run tests
      #   run: npm test

      - name: Build application
        run: npm run build

      - name: Create env file
        run: |
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          echo "NODE_ENV=production" >> .env

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create and navigate to app directory if it doesn't exist
            mkdir -p ~/app
            cd ~/app

            # Initialize git if not already initialized
            if [ ! -d .git ]; then
              git init
              git remote add origin https://github.com/sachinoo73/aahatimesheet.git
            fi
            
            # Backup current version if exists
            if [ -f package.json ]; then
              timestamp=$(date +%Y%m%d_%H%M%S)
              mkdir -p ~/backups
              cp -r . ~/backups/backup_$timestamp
            fi
            
            # Fetch and reset to match remote state
            git fetch origin main
            git reset --hard origin/main
            
            # Install dependencies
            npm install
            cd server && npm install
            cd ..
            
            # Copy env file
            echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env
            echo "NODE_ENV=production" >> .env
            
            # Build the application
            npm run build
            
            # Restart the application with PM2
            pm2 restart timesheet-app || pm2 start npm --name "timesheet-app" -- start
            
            # Save PM2 process list
            pm2 save
            
            # Verify deployment
            if ! pm2 show timesheet-app > /dev/null 2>&1; then
              echo "Deployment failed - rolling back"
              cp -r ~/backups/backup_$timestamp/* .
              pm2 restart timesheet-app
              exit 1
            fi
            
            # Health check
            for i in {1..6}; do
              if curl -f http://localhost:3000/health; then
                echo "Health check passed"
                break
              fi
              if [ "$i" -eq 6 ]; then
                echo "Health check failed - rolling back"
                cp -r ~/backups/backup_$timestamp/* .
                pm2 restart timesheet-app
                exit 1
              fi
              echo "Waiting for service to be healthy..."
              sleep 10
            done
            
            # Cleanup old backups (keep last 5)
            cd ~/backups && ls -t | tail -n +6 | xargs -I {} rm -rf {}
            
            echo "Deployment successful!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed!"
          # Add notification logic here (e.g., Slack, email)
